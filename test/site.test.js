const expect = require("chai").expect;

const path = require('path');

const utils = require('../lib/utils');
const site = require('../lib/site');
const fs = require('fs');

const srcPrefix = path.join('test', 'sites');
const compPrefix = path.join('test', 'correct-sites');

// compare all the files generated by site.build against
// a set of known correct ones
function compareAllGeneratedFiles(folder) {
  const destPath = path.join("temp", folder);
  utils.ensureDirectoryExists("temp");
  utils.ensureDirectoryExists(destPath);

  const srcPath = path.join(srcPrefix, folder);
  const compPath = path.join(compPrefix, folder);

  site.build(srcPath, destPath, function (uriPath) {
    // read the file generated by site
    const generated = fs.readFileSync(path.join(destPath, uriPath), 'utf8');
    const correct = fs.readFileSync(path.join(compPath, uriPath), 'utf8');
    expect(generated.trim()).to.equal(correct.trim());
  });
}

describe("site", function() {
  it('local-variables', () => {
    compareAllGeneratedFiles('local-variables');
  });

  it('check imbue-site', () => {
    compareAllGeneratedFiles('imbue-site');
  });

  it('check nested-layout', () => {
    compareAllGeneratedFiles('nested-layout');
  });

  it('check jaded-1', () => {
    compareAllGeneratedFiles('jaded-1');
  });

  it('check in-list', () => {
    compareAllGeneratedFiles('in-list');
  });
});
